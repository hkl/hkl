#ifndef HKL_TYPE_H
#define HKL_TYPE_H

typedef enum HklType
{
  HKL_INT = 0x1,
  HKL_REAL = 0x2,
  HKL_STRING = 0x4,
  HKL_ARRAY = 0x8,
  HKL_HASH = 0x10
} HklType;

typedef enum HklOperator
{
  HKL_NOT = 0x1,
  HKL_OR = 0x2, 
  HKL_AND = 0x4,
  HKL_LESS_EQUAL = 0x8,
  HKL_GREATER_EQUAL = 0x10,
  HKL_LESS = 0x20,
  HKL_GREATER = 0x40, 
  HKL_EQUAL = 0x80,
  HKL_NOT_EQUAL = 0x100,
  HKL_PLUS = 0x200,
  HKL_MINUS = 0x400,
  HKL_ASTERISK = 0x800,
  HKL_DIVIDE = 0x1000,
  HKL_MOD = 0x2000,
  HKL_BITWISE_NOT = 0x4000,
  HKL_BITWISE_AND = 0x8000,
  HKL_BITWISE_OR = 0x10000,
  HKL_BITWISE_XOR = 0x20000,
  HKL_TYPE_OF = 0x40000,
  HKL_INSTANCE_OF = 0x80000,
  HKL_INCREMENT = 0x100000,
  HKL_DECREMENT = 0x200000
} HklOperator;

typedef enum HklAssignOperator
{
  HKL_ASSIGN = 0x1,
  HKL_PLUS_ASSIGN = 0x2,
  HKL_MINUS_ASSIGN = 0x4,
  HKL_ASTERISK_ASSIGN = 0x8,
  HKL_DIVIDE_ASSIGN = 0x10,
  HKL_MOD_ASSIGN = 0x20,
  HKL_BITWISE_AND_ASSIGN = 0x40,
  HKL_BITWISE_OR_ASSIGN = 0x80,
  HKL_BITWISE_XOR_ASSIGN = 0x100
} HklAssignOperator;


// HKL_UNARY_OP and HKL_BINARY_OP constants are used for
// easily getting the number of arguments for any operator in
// HklOperator.
const int HKL_UNARY_OP =
  HKL_NOT |
  HKL_BITWISE_NOT |
  HKL_INCREMENT |
  HKL_DECREMENT;

const int HKL_BINARY_OP =
  HKL_OR | 
  HKL_AND | 
  HKL_LESS_EQUAL | 
  HKL_GREATER_EQUAL |
  HKL_LESS | 
  HKL_GREATER | 
  HKL_EQUAL |
  HKL_NOT_EQUAL |
  HKL_PLUS |
  HKL_MINUS |
  HKL_ASTERISK |
  HKL_DIVIDE |
  HKL_MOD |
  HKL_BITWISE_AND |
  HKL_BITWISE_OR |
  HKL_BITWISE_XOR |
  HKL_TYPE_OF |
  HKL_INSTANCE_OF;

#endif
